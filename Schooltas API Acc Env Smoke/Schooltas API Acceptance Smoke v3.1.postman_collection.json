{
	"info": {
		"_postman_id": "e0fc0866-e1fc-403d-a228-1bcf0d62b05b",
		"name": "Schooltas API Acceptance Smoke",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Admin OAuth 2.0 First Step",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a87bd475-214c-45de-b76f-481deb6bb5f9",
						"exec": [
							"pm.test(\"Status code is 302\", function () {",
							"    pm.response.to.have.status(302);",
							"});",
							"",
							"pm.environment.set(\"admin_oauth_code\",postman.getResponseHeader(\"Location\").split(\"=\")[1].split(\"&\")[0]);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f156a453-b78b-4a31-b68f-d52a0715253b",
						"exec": [
							"pm.environment.set(\"oauth_client_id\",\"6d6df4e4-699c-4f3d-93e3-a2abee9d30b7\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {},
				"url": {
					"raw": "https://backend-acc.schooltas.net/login/oauth/authorize?client_id={{oauth_client_id}}&redirect_uri=https://www.getpostman.com&state=State&email=schooltas.school@gmail.com&password=nuamparola",
					"protocol": "https",
					"host": [
						"backend-acc",
						"schooltas",
						"net"
					],
					"path": [
						"login",
						"oauth",
						"authorize"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{oauth_client_id}}"
						},
						{
							"key": "redirect_uri",
							"value": "https://www.getpostman.com"
						},
						{
							"key": "state",
							"value": "State"
						},
						{
							"key": "email",
							"value": "schooltas.school@gmail.com"
						},
						{
							"key": "password",
							"value": "nuamparola"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin OAuth 2.0 Second Step",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f4452d1-9375-44c2-a7c9-52c1466d225d",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.environment.set(\"admin_access_token\",jsonData.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://backend-acc.schooltas.net/login/oauth/access_token?client_id={{oauth_client_id}}&client_secret=8d91b452-9c50-44f1-a3e8-a98911b1b6d3&code={{admin_oauth_code}}",
					"protocol": "https",
					"host": [
						"backend-acc",
						"schooltas",
						"net"
					],
					"path": [
						"login",
						"oauth",
						"access_token"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{oauth_client_id}}"
						},
						{
							"key": "client_secret",
							"value": "8d91b452-9c50-44f1-a3e8-a98911b1b6d3"
						},
						{
							"key": "code",
							"value": "{{admin_oauth_code}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Publisher OAuth 2.0 First Step",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e10f765c-57eb-46cc-8f1b-0706d230b0c6",
						"exec": [
							"pm.test(\"Status code is 302\", function () {",
							"    pm.response.to.have.status(302);",
							"});",
							"",
							"pm.environment.set(\"oauth_code\",postman.getResponseHeader(\"Location\").split(\"=\")[1].split(\"&\")[0]);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "19872d7d-b811-45ec-bc9d-2d50ae556b52",
						"exec": [
							"pm.environment.set(\"oauth_client_id\",\"6d6df4e4-699c-4f3d-93e3-a2abee9d30b7\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {},
				"url": {
					"raw": "https://backend-acc.schooltas.net/login/oauth/authorize?client_id={{oauth_client_id}}&redirect_uri=https://www.getpostman.com&state=State&email=schooltas.publisher2@gmail.com&password=nuamparola",
					"protocol": "https",
					"host": [
						"backend-acc",
						"schooltas",
						"net"
					],
					"path": [
						"login",
						"oauth",
						"authorize"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{oauth_client_id}}"
						},
						{
							"key": "redirect_uri",
							"value": "https://www.getpostman.com"
						},
						{
							"key": "state",
							"value": "State"
						},
						{
							"key": "email",
							"value": "schooltas.publisher2@gmail.com"
						},
						{
							"key": "password",
							"value": "nuamparola"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Publisher OAuth 2.0 Second Step",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ddef5f15-a26d-46d9-a1bc-ab43c0e60d94",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.environment.set(\"publisher_access_token\",jsonData.access_token);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://backend-acc.schooltas.net/login/oauth/access_token?client_id={{oauth_client_id}}&client_secret=8d91b452-9c50-44f1-a3e8-a98911b1b6d3&code={{oauth_code}}",
					"protocol": "https",
					"host": [
						"backend-acc",
						"schooltas",
						"net"
					],
					"path": [
						"login",
						"oauth",
						"access_token"
					],
					"query": [
						{
							"key": "client_id",
							"value": "{{oauth_client_id}}"
						},
						{
							"key": "client_secret",
							"value": "8d91b452-9c50-44f1-a3e8-a98911b1b6d3"
						},
						{
							"key": "code",
							"value": "{{oauth_code}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all the books",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1f5565c4-4185-45d9-a05d-20a9b801ec42",
						"exec": [
							"pm.environment.set(\"organization\",\"16bc0375-e276-4396-a03d-8cf27483ad38\");",
							"pm.environment.set(\"type\",\"Publisher\");",
							"pm.environment.set(\"language\",\"EN\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "729da499-40f8-43bd-a7f9-67c04b56b8a6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/books?organization={{organization}}&type={{type}}&language={{language}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"books"
					],
					"query": [
						{
							"key": "organization",
							"value": "{{organization}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						},
						{
							"key": "language",
							"value": "{{language}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the book subjects",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "92e434cb-95bf-49e1-b6f8-5f8e82316864",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.environment.set(\"book_subject\",jsonData.subjects[Math.floor(Math.random() * jsonData.subjects.length)].id);",
							"",
							"pm.environment.set(\"book_updated_subject\",jsonData.subjects[Math.floor(Math.random() * jsonData.subjects.length)].id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/books/subjects?language={{language}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"books",
						"subjects"
					],
					"query": [
						{
							"key": "language",
							"value": "{{language}}"
						}
					]
				},
				"description": "Set the book_subject environment variable for the >> POST books - create book << request\n\nSet the book_updated_subject environment variable for the >> POST books - update book << request"
			},
			"response": []
		},
		{
			"name": "Get the book types",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "64da4040-1a5c-46ad-a99b-4d8ae7f431f7",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.environment.set(\"book_type\",jsonData.types[Math.floor(Math.random() * jsonData.types.length)].name);",
							"",
							"pm.environment.set(\"book_updated_type\",jsonData.types[Math.floor(Math.random() * jsonData.types.length)].name);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/books/types?language={{language}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"books",
						"types"
					],
					"query": [
						{
							"key": "language",
							"value": "{{language}}"
						}
					]
				},
				"description": "Set the book_type for the >> POST books - create book << request\n\nSet the book_updated_type for the >> POST books - update book << request"
			},
			"response": []
		},
		{
			"name": "Create a book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9a09b734-8413-46c0-abbb-985d7379ae27",
						"exec": [
							"function getRndInteger(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"book_ean\",getRndInteger(1000000000000,9999999999999));\r",
							"\r",
							"pm.environment.set(\"book_title\",\"Test Postman Book\");\r",
							"\r",
							"pm.environment.set(\"book_year\",getRndInteger(1,3));\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "51867fb2-11fa-4128-8634-89d9148bed23",
						"exec": [
							"if(pm.response.code == 400){",
							"    ",
							"    if(pm.response.json().messages == \"EAN already exists\"){",
							"",
							"        postman.setNextRequest(\"Create a book\");",
							"        ",
							"    }",
							"    ",
							"} else {",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"Ean is \" + pm.environment.get(\"book_ean\"), function(){",
							"        pm.expect(parseInt(pm.response.json().ean)).to.equal(pm.environment.get(\"book_ean\"));",
							"    });",
							"",
							"",
							"    var jsonData = JSON.parse(responseBody);",
							"    ",
							"    pm.environment.set(\"book_id\", jsonData.id);",
							"    ",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "ean",
							"value": "{{book_ean}}",
							"type": "text"
						},
						{
							"key": "title",
							"value": "{{book_title}}",
							"type": "text"
						},
						{
							"key": "year",
							"value": "{{book_year}}",
							"type": "text"
						},
						{
							"key": "subject",
							"value": "{{book_subject}}",
							"type": "text"
						},
						{
							"key": "type",
							"value": "{{book_type}}",
							"type": "text"
						},
						{
							"key": "language",
							"value": "{{language}}",
							"type": "text"
						},
						{
							"key": "pdfFile",
							"type": "file",
							"src": "",
							"disabled": true
						},
						{
							"key": "coverFile",
							"type": "file",
							"src": "",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/books?language={{language}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"books"
					],
					"query": [
						{
							"key": "language",
							"value": "{{language}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b4208134-6d80-4a7c-a409-2d2544608212",
						"exec": [
							"function getRndInteger(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"book_updated_title\",\"Test Postman Book Updated\");\r",
							"\r",
							"pm.environment.set(\"book_updated_year\",getRndInteger(1,3));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d28258f9-0d70-4034-bfa4-2fd39f74dabd",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Book Id is \" + pm.environment.get(\"book_id\"), function(){",
							"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"book_id\"));",
							"});",
							"",
							"pm.test(\"Ean is \" + pm.environment.get(\"book_ean\"), function(){",
							"    pm.expect(parseInt(pm.response.json().ean)).to.equal(pm.environment.get(\"book_ean\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ean\": \"{{book_ean}}\",\r\n  \"title\": \"{{book_updated_title}}\",\r\n  \"year\": {{book_updated_year}},\r\n  \"subject\": \"{{book_updated_subject}}\",\r\n  \"type\": \"{{book_updated_type}}\"\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/books/{{book_id}}?language={{language}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"books",
						"{{book_id}}"
					],
					"query": [
						{
							"key": "language",
							"value": "{{language}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all book licenses",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0b023124-5434-4c02-ac67-057cd5591005",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/licenses?type=BOOKS",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"licenses"
					],
					"query": [
						{
							"key": "type",
							"value": "BOOKS"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create book license",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ce4edccc-5435-456a-8abc-9a12157cea91",
						"exec": [
							"function getRndLicenseCode() {",
							"    var text = \"\";",
							"    var possible = \"abcdefghijklmnopqrstuvwxyz\";",
							"    ",
							"    for (var i = 0; i < 16; i++)",
							"    {",
							"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
							"    }",
							"    ",
							"    return text;     ",
							"}",
							"",
							"pm.environment.set(\"book_license_code\", getRndLicenseCode());",
							"",
							"pm.environment.set(\"book_license_name\",\"Postman test book licence\");",
							"",
							"pm.environment.set(\"book_license_activations\", 99);",
							"",
							"pm.environment.set(\"book_license_days\", 365);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3dba5b57-3c7d-452b-8d84-7b3ea20a9644",
						"exec": [
							"if(pm.response.code == 400){",
							"    ",
							"    if(pm.response.json().error == \"INVALID_PARAMETERS\"){",
							"",
							"        for(var index = 0; index < pm.response.json().messages.length; ++index) {",
							"            ",
							"            if(pm.response.json().messages[index] == \"Error on field code: The license code already exists\") {",
							"                ",
							"                postman.setNextRequest(\"Create book license\");",
							"                break;",
							"                ",
							"            }",
							"            ",
							"        }",
							"        ",
							"    }",
							"    ",
							"} else {",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    pm.test(\"The license name is correct\", function () {",
							"        pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"book_license_name\"));",
							"    });",
							"    ",
							"    pm.test(\"License type is book\", function () {",
							"        pm.expect(pm.response.json().type).to.eql(\"Books\");",
							"    });",
							"    ",
							"    pm.test(\"The book is added to the license\", function () {",
							"        pm.expect(pm.response.json().books[0].id).to.eql(pm.environment.get(\"book_id\"));",
							"    });",
							"    ",
							"    pm.test(\"The license code is correct\", function () {",
							"        pm.expect(pm.response.json().code).to.eql(pm.environment.get(\"book_license_code\"));",
							"    });",
							"    ",
							"    pm.test(\"The license days number is correct\", function () {",
							"        pm.expect(pm.response.json().expiration.days).to.eql(pm.environment.get(\"book_license_days\"));",
							"    });",
							"    ",
							"    pm.test(\"The license maximum activations number is correct\", function () {",
							"        pm.expect(pm.response.json().maximumActivations).to.eql(pm.environment.get(\"book_license_activations\"));",
							"    });",
							"",
							"    ",
							"    pm.environment.set(\"book_license_id\", pm.response.json().id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{book_license_name}}\",\r\n  \"code\": \"{{book_license_code}}\",\r\n  \"expiration\": {\r\n    \"type\": \"Days\",\r\n    \"days\": {{book_license_days}}\r\n  },\r\n  \"maximumActivations\": {{book_license_activations}},\r\n  \"type\": \"Books\",\r\n  \"books\": [\"{{book_id}}\"]\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/licenses",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"licenses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create book for Update book license",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ca20fcf9-a1ab-44a6-8017-4ed24417fbe6",
						"exec": [
							"function getRndInteger(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min)) + min;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"second_book_ean\",getRndInteger(1000000000000,9999999999999));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "61bdd835-9f1c-40d0-b877-fd55e1074855",
						"exec": [
							"if(pm.response.code == 400){",
							"    ",
							"    if(pm.response.json().messages == \"EAN already exists\"){",
							"",
							"        postman.setNextRequest(\"Create book for Update book license\");",
							"        ",
							"    }",
							"    ",
							"} else {",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    pm.test(\"Ean is \" + pm.environment.get(\"second_book_ean\"), function(){",
							"        pm.expect(parseInt(pm.response.json().ean)).to.equal(pm.environment.get(\"second_book_ean\"));",
							"    });",
							"",
							"",
							"    var jsonData = JSON.parse(responseBody);",
							"    ",
							"    pm.environment.set(\"second_book_id\", jsonData.id);",
							"    ",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "ean",
							"value": "{{second_book_ean}}",
							"type": "text"
						},
						{
							"key": "title",
							"value": "{{book_title}}",
							"type": "text"
						},
						{
							"key": "year",
							"value": "{{book_year}}",
							"type": "text"
						},
						{
							"key": "subject",
							"value": "{{book_subject}}",
							"type": "text"
						},
						{
							"key": "type",
							"value": "{{book_type}}",
							"type": "text"
						},
						{
							"key": "language",
							"value": "{{language}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/books?language={{language}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"books"
					],
					"query": [
						{
							"key": "language",
							"value": "{{language}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update book license",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a96d2831-0c4f-45db-b9eb-61d5418c036e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"pm.test(\"The updated license name is correct\", function () {",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"updated_book_license_name\"));",
							"});",
							"",
							"pm.test(\"Updated license type is book\", function () {",
							"    pm.expect(pm.response.json().type).to.eql(\"Books\");",
							"});",
							"",
							"pm.test(\"The book is updated to the license\", function () {",
							"    pm.expect(pm.response.json().books[0].id).to.eql(pm.environment.get(\"second_book_id\"));",
							"});",
							"",
							"pm.test(\"The updated license code is correct\", function () {",
							"    pm.expect(pm.response.json().code).to.eql(pm.environment.get(\"book_license_code\"));",
							"});",
							"",
							"pm.test(\"The updated license days number is correct\", function () {",
							"    pm.expect(pm.response.json().expiration.days).to.eql(pm.environment.get(\"updated_book_license_days\"));",
							"});",
							"",
							"pm.test(\"The updated license maximum activations number is correct\", function () {",
							"    pm.expect(pm.response.json().maximumActivations).to.eql(pm.environment.get(\"updated_book_license_activations\"));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "1c4fc5de-0d16-48f6-a9e4-65935df6c44f",
						"exec": [
							"pm.environment.set(\"updated_book_license_name\",\"Postman test book licence updated\");",
							"",
							"pm.environment.set(\"updated_book_license_activations\", 1);",
							"",
							"pm.environment.set(\"updated_book_license_days\", 30);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{updated_book_license_name}}\",\r\n  \"expiration\": {\r\n    \"type\": \"Days\",\r\n    \"days\": {{updated_book_license_days}}\r\n  },\r\n  \"maximumActivations\": {{updated_book_license_activations}},\r\n  \"type\": \"Books\",\r\n  \"books\": [\"{{second_book_id}}\"]\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/licenses/{{book_license_id}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"licenses",
						"{{book_license_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all teacher licenses",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3389a31f-1034-48f5-b5b4-7560a72e1332",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/licenses?type=TEACHER",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"licenses"
					],
					"query": [
						{
							"key": "type",
							"value": "TEACHER"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create teacher license",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "59322bf3-c300-46fd-844d-8666287fb228",
						"exec": [
							"function getRndLicenseCode() {",
							"    var text = \"\";",
							"    var possible = \"abcdefghijklmnopqrstuvwxyz\";",
							"    ",
							"    for (var i = 0; i < 16; i++)",
							"    {",
							"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
							"    }",
							"    ",
							"    return text;     ",
							"}",
							"",
							"pm.environment.set(\"teacher_license_code\", getRndLicenseCode());",
							"",
							"pm.environment.set(\"teacher_license_name\",\"Postman test teacher licence\");",
							"",
							"pm.environment.set(\"teacher_license_activations\", 99);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1da6c876-b2d8-4e05-b171-9bb2cf69e9f4",
						"exec": [
							"if(pm.response.code == 400){",
							"    ",
							"    if(pm.response.json().error == \"INVALID_PARAMETERS\"){",
							"",
							"        for(var index = 0; index < pm.response.json().messages.length; ++index) {",
							"            ",
							"            if(pm.response.json().messages[index] == \"Error on field code: The license code already exists\") {",
							"                ",
							"                postman.setNextRequest(\"Create teacher license\");",
							"                break;",
							"                ",
							"            }",
							"            ",
							"        }",
							"        ",
							"    }",
							"    ",
							"} else {",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    pm.test(\"The license name is correct\", function () {",
							"        pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"teacher_license_name\"));",
							"    });",
							"    ",
							"    pm.test(\"License type is teacher\", function () {",
							"        pm.expect(pm.response.json().type).to.eql(\"Teacher\");",
							"    });",
							"    ",
							"    pm.test(\"The license code is correct\", function () {",
							"        pm.expect(pm.response.json().code).to.eql(pm.environment.get(\"teacher_license_code\"));",
							"    });",
							"    ",
							"    pm.test(\"The license maximum activations number is correct\", function () {",
							"        pm.expect(pm.response.json().maximumActivations).to.eql(pm.environment.get(\"teacher_license_activations\"));",
							"    });",
							"    ",
							"    pm.environment.set(\"teacher_license_id\", pm.response.json().id);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{teacher_license_name}}\",\r\n  \"code\": \"{{teacher_license_code}}\",\r\n  \"maximumActivations\": {{teacher_license_activations}},\r\n  \"type\": \"Teacher\"\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/licenses",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"licenses"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update teacher license",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d66c6988-4810-4f86-b520-3ac69994a69c",
						"exec": [
							"pm.environment.set(\"updated_teacher_license_name\",\"Postman test teacher licence updated\");",
							"",
							"pm.environment.set(\"updated_teacher_license_activations\", 1);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a522b036-b67a-4d5c-9c69-b3da56027722",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"The updated license name is correct\", function () {",
							"    pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"updated_teacher_license_name\"));",
							"});",
							"",
							"pm.test(\"The updated license code is correct\", function () {",
							"    pm.expect(pm.response.json().code).to.eql(pm.environment.get(\"teacher_license_code\"));",
							"});",
							"",
							"pm.test(\"Updated license type is teacher\", function () {",
							"    pm.expect(pm.response.json().type).to.eql(\"Teacher\");",
							"});",
							"",
							"pm.test(\"The updated license maximum activations number is correct\", function () {",
							"    pm.expect(pm.response.json().maximumActivations).to.eql(pm.environment.get(\"updated_teacher_license_activations\"));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"{{updated_teacher_license_name}}\",\r\n  \"maximumActivations\": {{updated_teacher_license_activations}},\r\n  \"type\": \"Teacher\"\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/licenses/{{teacher_license_id}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"licenses",
						"{{teacher_license_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all the readers",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1509ccc7-9ceb-44c3-b22f-72dce57a8837",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{admin_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/readers?language={{language}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"readers"
					],
					"query": [
						{
							"key": "language",
							"value": "{{language}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all the users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d9e79404-653c-40c1-b7b1-704ec2ea8d6f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/users?organization={{organization}}&type={{type}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"users"
					],
					"query": [
						{
							"key": "organization",
							"value": "{{organization}}"
						},
						{
							"key": "type",
							"value": "{{type}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0ac96856-7e07-4461-b6d6-efed658a3178",
						"exec": [
							"function getRndEmail() {",
							"    var text = \"\";",
							"    var possible = \"abcdefghijklmnopqrstuvwxyz0123456789\";",
							"    var possible2 = \"abcdefghijklmnopqrstuvwxyz\";",
							"    for (var i = 0; i < 20; i++)",
							"    {",
							"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
							"    }",
							"    text += \"@\";",
							"    for (i = 0; i < 7; i++)",
							"    {",
							"        text += possible2.charAt(Math.floor(Math.random() * possible2.length));",
							"    }",
							"    text += \".com\";",
							"    ",
							"    return text;     ",
							"}",
							"",
							"pm.environment.set(\"user_firstName\",\"Postman Test\");",
							"",
							"pm.environment.set(\"user_lastName\",\"User\");",
							"",
							"pm.environment.set(\"user_email\",getRndEmail());",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "edb03a43-b5a0-4621-a82c-4808db0cf9ab",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.environment.set(\"new_user_id\", pm.response.json().id);",
							"",
							"pm.test(\"The new user email is correct\", function () {",
							"    pm.expect(pm.response.json().email).to.eql(pm.environment.get(\"user_email\"));",
							"});",
							"",
							"pm.test(\"The new user first name is correct\", function () {",
							"    pm.expect(pm.response.json().firstName).to.eql(pm.environment.get(\"user_firstName\"));",
							"});",
							"",
							"pm.test(\"The new user last name is correct\", function () {",
							"    pm.expect(pm.response.json().lastName).to.eql(pm.environment.get(\"user_lastName\"));",
							"});",
							"",
							"pm.test(\"The new user assigned language is correct\", function () {",
							"    pm.expect(pm.response.json().language).to.eql(pm.environment.get(\"language\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"{{user_firstName}}\",\r\n  \"lastName\": \"{{user_lastName}}\",\r\n  \"email\": \"{{user_email}}\",\r\n  \"language\": \"{{language}}\",\r\n  \"organization\": {\r\n    \"id\": \"{{organization}}\",\r\n    \"type\": \"{{type}}\"\r\n  },\r\n  \"roles\": []\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/users",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new end user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ce70ca39-44e2-450d-8b20-45c2472807da",
						"exec": [
							"function getRndEmail() {",
							"    var text = \"\";",
							"    var possible = \"abcdefghijklmnopqrstuvwxyz0123456789\";",
							"    var possible2 = \"abcdefghijklmnopqrstuvwxyz\";",
							"    for (var i = 0; i < 20; i++)",
							"    {",
							"        text += possible.charAt(Math.floor(Math.random() * possible.length));",
							"    }",
							"    text += \"@\";",
							"    for (i = 0; i < 7; i++)",
							"    {",
							"        text += possible2.charAt(Math.floor(Math.random() * possible2.length));",
							"    }",
							"    text += \".com\";",
							"    ",
							"    return text;     ",
							"}",
							"",
							"pm.environment.set(\"enduser_firstName\",\"Postman Test\");",
							"",
							"pm.environment.set(\"enduser_lastName\",\"End User\");",
							"",
							"pm.environment.set(\"enduser_email\",getRndEmail());",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5df9e9c7-515e-4120-9064-eab5b7052b0a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.environment.set(\"new_enduser_id\", pm.response.json().id);",
							"",
							"pm.test(\"The new enduser email is correct\", function () {",
							"    pm.expect(pm.response.json().email).to.eql(pm.environment.get(\"enduser_email\"));",
							"});",
							"",
							"pm.test(\"The new enduser first name is correct\", function () {",
							"    pm.expect(pm.response.json().firstName).to.eql(pm.environment.get(\"enduser_firstName\"));",
							"});",
							"",
							"pm.test(\"The new enduser last name is correct\", function () {",
							"    pm.expect(pm.response.json().lastName).to.eql(pm.environment.get(\"enduser_lastName\"));",
							"});",
							"",
							"pm.test(\"The new enduser assigned language is correct\", function () {",
							"    pm.expect(pm.response.json().language).to.eql(pm.environment.get(\"language\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"{{enduser_firstName}}\",\r\n  \"lastName\": \"{{enduser_lastName}}\",\r\n  \"email\": \"{{enduser_email}}\",\r\n  \"language\": \"{{language}}\"\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/users/enduser",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"users",
						"enduser"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3aab158f-ab24-4c5b-b16a-cc2593ec7102",
						"exec": [
							"pm.environment.set(\"user_updatedFirstName\",\"Updated Postman Test\");",
							"",
							"pm.environment.set(\"user_updatedLastName\",\"Updated User\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "aab3efdd-0de8-40cf-bfd1-2eaf57aba3b6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"The updated user id is correct\", function () {",
							"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"new_user_id\"));",
							"});",
							"",
							"pm.test(\"The updated user email is correct\", function () {",
							"    pm.expect(pm.response.json().email).to.eql(pm.environment.get(\"user_email\"));",
							"});",
							"",
							"pm.test(\"The updated user first name is correct\", function () {",
							"    pm.expect(pm.response.json().firstName).to.eql(pm.environment.get(\"user_updatedFirstName\"));",
							"});",
							"",
							"pm.test(\"The updated user last name is correct\", function () {",
							"    pm.expect(pm.response.json().lastName).to.eql(pm.environment.get(\"user_updatedLastName\"));",
							"});",
							"",
							"pm.test(\"The updated user assigned language is correct\", function () {",
							"    pm.expect(pm.response.json().language).to.eql(pm.environment.get(\"language\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"{{user_updatedFirstName}}\",\r\n  \"lastName\": \"{{user_updatedLastName}}\",\r\n  \"organization\": {\r\n    \"id\": \"{{organization}}\",\r\n    \"type\": \"{{type}}\"\r\n  },\r\n  \"roles\": []\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/users/{{new_user_id}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"users",
						"{{new_user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an enduser",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "837f99d5-bbae-4d4f-924a-c8a608e857f3",
						"exec": [
							"pm.environment.set(\"enduser_updatedFirstName\",\"Updated Postman Test\");",
							"",
							"pm.environment.set(\"enduser_updatedLastName\",\"Updated End User\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7cda08aa-fc5a-4bba-950b-9b8de3894ea3",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"The updated enduser id is correct\", function () {",
							"    pm.expect(pm.response.json().id).to.eql(pm.environment.get(\"new_enduser_id\"));",
							"});",
							"",
							"pm.test(\"The updated enduser email is correct\", function () {",
							"    pm.expect(pm.response.json().email).to.eql(pm.environment.get(\"enduser_email\"));",
							"});",
							"",
							"pm.test(\"The updated enduser first name is correct\", function () {",
							"    pm.expect(pm.response.json().firstName).to.eql(pm.environment.get(\"enduser_updatedFirstName\"));",
							"});",
							"",
							"pm.test(\"The updated enduser last name is correct\", function () {",
							"    pm.expect(pm.response.json().lastName).to.eql(pm.environment.get(\"enduser_updatedLastName\"));",
							"});",
							"",
							"pm.test(\"The updated enduser assigned language is correct\", function () {",
							"    pm.expect(pm.response.json().language).to.eql(pm.environment.get(\"language\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{publisher_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstName\": \"{{enduser_updatedFirstName}}\",\r\n  \"lastName\": \"{{enduser_updatedLastName}}\"\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/users/enduser/{{new_enduser_id}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"users",
						"enduser",
						"{{new_enduser_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all the subscriptions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d24bb1b5-9ae7-4d1b-84b9-123499ef6a9e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{admin_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/subscriptions",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"subscriptions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a subscription",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b0f605d4-9a57-4f14-b1d4-a395131274a4",
						"exec": [
							"function getNextDate(){",
							"    ",
							"    var d = new Date();",
							"    d.setDate(d.getDate()+1);",
							"    var currentDate = \"\";",
							"    currentDate += d.getFullYear() + \"-\";",
							"    ",
							"    let month = d.getMonth() + 1;",
							"    if(month < 10){",
							"        ",
							"        currentDate += \"0\" + month + \"-\";",
							"        ",
							"    } else {",
							"        ",
							"        currentDate += month + \"-\";",
							"        ",
							"    }",
							"    ",
							"    if(d.getDate() < 10){",
							"        ",
							"        currentDate += \"0\" + d.getDate();",
							"        ",
							"    } else {",
							"        ",
							"        currentDate += d.getDate();",
							"        ",
							"    }",
							"    ",
							"    return currentDate;",
							"}",
							"",
							"",
							"pm.environment.set(\"subscription_maxActivations\",5);",
							"pm.environment.set(\"subscription_expirationDate\",getNextDate());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9fcc3775-f7c0-4699-b9bc-a3df6de2bbc9",
						"exec": [
							"function getNextDate(){",
							"    ",
							"    var d = new Date();",
							"    d.setDate(d.getDate()+1);",
							"    var currentDate = \"\";",
							"    currentDate += d.getFullYear() + \"-\";",
							"    ",
							"    let month = d.getMonth() + 1;",
							"    if(month < 10){",
							"        ",
							"        currentDate += \"0\" + month + \"-\";",
							"        ",
							"    } else {",
							"        ",
							"        currentDate += month + \"-\";",
							"        ",
							"    }",
							"    ",
							"    if(d.getDate() < 10){",
							"        ",
							"        currentDate += \"0\" + d.getDate();",
							"        ",
							"    } else {",
							"        ",
							"        currentDate += d.getDate();",
							"        ",
							"    }",
							"    ",
							"    return currentDate;",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.environment.set(\"subscription_id\", pm.response.json().id);",
							"",
							"pm.environment.set(\"subscription_code\", pm.response.json().code);",
							"",
							"pm.test(\"The subscription maximum activations number is correct\", function () {",
							"    pm.expect(pm.response.json().maximumActivations).to.eql(pm.environment.get(\"subscription_maxActivations\"));",
							"});",
							"",
							"pm.test(\"The subscription is not expired\", function () {",
							"    pm.expect(pm.response.json().isExpired).to.eql(\"No\");",
							"});",
							"",
							"pm.test(\"The subscription number of activations is 0\", function () {",
							"    pm.expect(pm.response.json().numberOfActivations).to.eql(0);",
							"});",
							"",
							"pm.test(\"The subscription expiration date is correct\", function () {",
							"    pm.expect(pm.response.json().expirationDate.split(\"T\")[0]).to.eql(getNextDate());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{admin_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"maximumActivations\": {{subscription_maxActivations}},\r\n  \"expirationDate\": \"{{subscription_expirationDate}}\"\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/subscriptions",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"subscriptions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a subscription",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ba0de2ee-560c-4c29-bb7e-d344baacd970",
						"exec": [
							"pm.environment.set(\"subscription_maxActivations_updated\",1);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0ab92a7a-2691-42b8-b4a3-02cee04e33c0",
						"exec": [
							"function getNextDate(){",
							"    ",
							"    var d = new Date();",
							"    d.setDate(d.getDate()+1);",
							"    var currentDate = \"\";",
							"    currentDate += d.getFullYear() + \"-\";",
							"    ",
							"    let month = d.getMonth() + 1;",
							"    if(month < 10){",
							"        ",
							"        currentDate += \"0\" + month + \"-\";",
							"        ",
							"    } else {",
							"        ",
							"        currentDate += month + \"-\";",
							"        ",
							"    }",
							"    ",
							"    if(d.getDate() < 10){",
							"        ",
							"        currentDate += \"0\" + d.getDate();",
							"        ",
							"    } else {",
							"        ",
							"        currentDate += d.getDate();",
							"        ",
							"    }",
							"    ",
							"    return currentDate;",
							"}",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"The subscription maximum activations number is correct\", function () {",
							"    pm.expect(pm.response.json().maximumActivations).to.eql(pm.environment.get(\"subscription_maxActivations_updated\"));",
							"});",
							"",
							"pm.test(\"The subscription is not expired\", function () {",
							"    pm.expect(pm.response.json().isExpired).to.eql(\"No\");",
							"});",
							"",
							"pm.test(\"The subscription number of activations is 0\", function () {",
							"    pm.expect(pm.response.json().numberOfActivations).to.eql(0);",
							"});",
							"",
							"pm.test(\"The subscription expiration date is correct\", function () {",
							"    pm.expect(pm.response.json().expirationDate.split(\"T\")[0]).to.eql(getNextDate());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{admin_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"maximumActivations\": {{subscription_maxActivations_updated}}\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/subscriptions/{{subscription_id}}",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"subscriptions",
						"{{subscription_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assign a subscription to an end user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d92f3516-6ecc-4935-a738-accd453572bf",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2c83633-61f2-40cc-b540-e2841774048c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"The activated subscription code is correct\", function () {",
							"    var answer = false;",
							"    for(var i = 0; i < pm.response.json().activatedSubscriptionIds.length; ++i){",
							"        if(pm.response.json().activatedSubscriptionIds[i] == pm.environment.get(\"subscription_code\"))",
							"        {",
							"            answer = true;",
							"            pm.expect(true).to.equal(true);",
							"            break;",
							"        }",
							"    }",
							"    if(!answer){",
							"        pm.expect(true).to.equal(false);",
							"    }",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{admin_access_token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "scope",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userId\": \"{{new_enduser_id}}\",\r\n  \"subscriptionId\": \"{{subscription_id}}\"\r\n}"
				},
				"url": {
					"raw": "https://api-acc.schooltas.net/v1/subscriptions/assignSubscription",
					"protocol": "https",
					"host": [
						"api-acc",
						"schooltas",
						"net"
					],
					"path": [
						"v1",
						"subscriptions",
						"assignSubscription"
					]
				}
			},
			"response": []
		}
	]
}